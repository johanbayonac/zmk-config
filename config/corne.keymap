/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L  |  U  |  Y  |  "  | BKSP |
// | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  |  O  |  Â´   |
// | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H  |  ,  |  .  |  -  | SHFT |
//                    | LWR | RSE | SPC |   | ENT |  =  | ALT |
                        bindings = <
   &kp TAB    &kp Q  &kp W  &kp F  &kp P  &kp B       &kp J   &kp L        &kp U      &kp Y    &trans    &kp BSPC
   &kp LCTRL  &kp A  &kp R  &kp S  &kp T  &kp G       &kp M   &kp N        &kp E      &kp I    &kp O     &kp LBKT
   &kp LSHFT  &kp Z  &kp X  &kp C  &kp D  &kp V       &kp K   &kp H        &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                          &mo 1  &mo 2  &kp SPACE     &kp ENTER  &kp LS(N0)  &kp RALT
                        >;
                };
                
                lower_layer {
// -----------------------------------------------------------------------------------------
// | ESC   | V+   | Home |      |      |      |   |  (  |  )  | "|" |  !  |     | DEL |
// |       | mute |      |      |      |      |   |  {  |  }  |  &  |     | UP  |     |
// |       | V-   | End  |      |      |      |   |  [  |  ]  |  %  | LFT | DWN | RGT |
//                       |      |      |      |   |  <  |  >  |  =  |
                        bindings = <
   &kp ESC  &kp C_VOL_UP  &kp HOME  &trans  &trans  &trans     &kp LS(N8)     &kp LS(N9)   &kp GRAVE    &kp EXCL  &trans     &kp DEL
   &trans   &kp C_MUTE    &trans    &trans  &trans  &trans     &kp SQT        &kp BSLH     &kp CARET    &trans    &kp UP     &trans
   &trans   &kp C_VOL_DN  &kp END   &trans  &trans  &trans     &kp LS(SQT)    &kp PIPE     &kp LS(N5)   &kp LEFT  &kp DOWN   &kp RIGHT
                                    &trans  &trans  &trans     &kp LS(LT)     &kp LS(N60)  &kp LS(N0)
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// | ESC  |  F1  |  F2  |  F3  |  F4  |  F5  |   |  9  |  8  |  7  |  +  |  -  |  ^  |
// | CTRL |  F6  |  F7  |  F8  |  F9  |  F12 |   |  6  |  5  |  4  |  *  |  /  |  %  |
// | SHFT |      |      |      |   "  |   ?  |   |  3  |  2  |  1  |  .  |  ,  |  =  | // TODO: Fix this row when &mkp is committed
//                      | GUI  |      |  SPC |   | ENT |     |  0  |
                        bindings = <
   &kp ESC    &kp F1   &kp F2   &kp F3  &kp F4     &kp F5      &kp N9  &kp N8  &kp N7  &kp KP_PLUS      &kp KP_MINUS  &kp LS(N6)
   &kp LCTRL  &kp F6   &kp F7   &kp F8  &kp F9     &kp F10     &kp N6  &kp N5  &kp N4  &kp KP_MULTIPLY  &kp KP_DIVIDE &kp LS(N5)
   &kp LSHFT  &kp F11  &kp F12  &trans  &kp LS(N2) &kp QMARK   &kp N3  &kp N2  &kp N1  &kp KP_DOT       &kp KP_COMMA  &kp LS(N0)
                                &kp LGUI &trans    &kp SPACE   &kp ENTER &trans &kp N0
                        >;
                };
        };
};
