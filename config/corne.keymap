/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | TAB  | q Q | w W | f F | p P | b B |   | j J | l L  | u U | y Y | ' " | BKSP |
// | CTRL | a A | r R | s S | t T | g G |   | m M | n N  | e E | i I | o O | Â´ ?  |
// | SHFT | z Z | x X | c C | d D | v V |   | k K | h H  | , ; | . : | - _ | SHFT |
//                    | LWR | RSE | SPC |   | ENT | + =  | ALT |
                        bindings = <
   &kp TAB    &kp Q  &kp W  &kp F  &kp P  &kp B       &kp J   &kp L        &kp U      &kp Y    &SQT      &kp BSPC
   &kp LCTRL  &kp A  &kp R  &kp S  &kp T  &kp G       &kp M   &kp N        &kp E      &kp I    &kp O     &kp FSLH
   &kp LSHFT  &kp Z  &kp X  &kp C  &kp D  &kp V       &kp K   &kp H        &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                          &mo 1  &mo 2  &kp SPACE     &kp RET &Kp EQUAL  &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |ESC | VOL+ | HOME | INS |  ~  |  ^  |   |  (  |  )  |  &  |     |     | DEL  |
// |    | Mute |      |     |  \  |  "  |   |  {  |  }  |  |  |     | UP  |      |
// |    | VOL- | END  |     |     |     |   |  [  |  ]  |  !  | LFT | DWN | RGT  |
//                    |  x  |LGUI |Pause|   |  <  |  >  |  =  |
                        bindings = <
   &kp ESC  &kp K_VOL_UP  &kp HOME  &kp INSERT &kp TILDE  &kp CARET          &kp LPAR  &kp RPAR  &kp AMPS     &trans     &trans    &kp DEL  
   &trans   &bt K_MUTE    &trans    &trans     &bt BSLH   &bt DQT            &kp LBRC  &kp RBRC  &kp PIPE     &trans     &kp UP    &trans  
   &trans   &kp K_VOL_DN  &kp END   &trans     &trans     &trans             &kp LBKT  &kp RBKT  &kp EXCL     &kp LEFT   &kp DOWN  &kp RIGHT  
                                    &trans     &kp LGUI   &kp K_PLAY_PAUSE   &kp LT    &kp GT    &kp KP_EQUAL
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   |  +  |  *  |  @  |  7  |  8  |  9   |
// |  F7  |  F8 |  F9 | F10 | F11 | F12 |   |  -  |  /  |  %  |  4  |  5  |  6   |
// |  F13 | F14 | F15 | F16 | F17 | F18 |   |  #  |  $  |  ,  |  1  |  2  |  3   | // TODO: Fix this row when &mkp is committed
//                    | LGUI|  x  | MEN |   |  =  |  .  |  0  |
                        bindings = <
   &kp F1   &kp F2   &kp F3   &kp F4   &kp F5   &kp F6       &kp KP_PLUS   &kp KP_MULTIPLY  &kp AT_SIGN  &kp KP_N7  &kp KP_N8  &kp KP_N9
   &kp F7   &kp F8   &kp F9   &kp F10  &kp F11  &kp F12      &kp KP_MINUS  &kp KP_DIVIDE    &kp PRCNT    &kp KP_N4  &kp KP_N5  &kp KP_N6
   &kp F13  &kp F14  &kp F15  &kp F16  &kp F17  &kp F18      &kp HASH      &kp DOLLAR       &KP_COMMA    &kp KP_N1  &kp KP_N2  &kp KP_N3  
                              &kp LGUI &trans   &kp K_CMENU  &kp KP_EQUAL  &kp KP_DOT       &kp KP_N0
                        >;
                };
        };
};
